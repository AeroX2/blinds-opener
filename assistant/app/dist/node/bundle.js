(()=>{"use strict";const e=require("buffer"),t=new smarthome.App("1.0.0"),o=new class{constructor(t){this.app=t,this.identifyHandler=async t=>{console.log("IDENTIFY request",t);const o=t.inputs[0].payload.device;if(void 0===o)throw Error(`device is undefined: ${t}`);if(void 0===o.udpScanData)throw Error(`identify request is missing discovery response: ${t}`);const r=e.Buffer.from(o.udpScanData.data,"hex");console.debug("udpScanData:",r);const n=r.toString();console.debug("discoveryData:",n);const s={intent:smarthome.Intents.IDENTIFY,requestId:t.requestId,payload:{device:{id:o.id||"deviceId",verificationId:n}}};return console.log("IDENTIFY response",s),s},this.executeHandler=t=>{const o=t.inputs[0].payload.commands[0],r=o.execution[0],n=r.params,s=(new smarthome.Execute.Response.Builder).setRequestId(t.requestId),a=o.devices.map((o=>{let a=e.Buffer.from([]);switch(r.command){case"action.devices.commands.OpenClose":a=n.openPercent>0?e.Buffer.from("U0"):e.Buffer.from("D0");break;default:throw Error(`Unsupported command: ${r.command}`)}const d=new smarthome.DataFlow.TcpRequestData;return d.operation=smarthome.Constants.TcpOperation.WRITE,d.port=9377,d.data=a.toString("hex"),d.requestId=t.requestId,d.deviceId=o.id,console.debug("TcpCommand:",d),this.app.getDeviceManager().send(d).then((e=>{s.setSuccessState(e.deviceId,{})})).catch((e=>{e.errorCode=e.errorCode||smarthome.IntentFlow.ErrorCode.INVALID_REQUEST,s.setErrorState(o.id,e.errorCode)}))}));return Promise.all(a).then((()=>s.build()))},this.app=t}}(t);t.onIdentify(o.identifyHandler).onExecute(o.executeHandler).listen().then((()=>{console.log("Ready")}))})();